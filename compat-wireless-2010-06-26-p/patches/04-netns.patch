The only other namespace change. Note that pach 01-netdev.patch
also has some other namespace changes there, look at that file
for the other changes. It'd be nice to figure out a way to
bring thise here cleanly and seprately but they touch the same
files...

--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -30,7 +30,9 @@ static struct genl_family nl80211_fam = 
 	.hdrsize = 0,		/* no private header */
 	.version = 1,		/* no particular meaning now */
 	.maxattr = NL80211_ATTR_MAX,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,32))
 	.netnsok = true,
+#endif
 };
 
 /* internal helper: get rdev and dev */
@@ -4343,7 +4345,9 @@ static int nl80211_wiphy_netns(struct sk
 
 	err = cfg80211_switch_netns(rdev, net);
  out_put_net:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	put_net(net);
+#endif
  out:
 	cfg80211_unlock_rdev(rdev);
  out_rtnl:
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -224,6 +224,7 @@ int cfg80211_dev_rename(struct cfg80211_
 	return 0;
 }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 int cfg80211_switch_netns(struct cfg80211_registered_device *rdev,
 			  struct net *net)
 {
@@ -259,6 +260,7 @@ int cfg80211_switch_netns(struct cfg8021
 
 	return err;
 }
+#endif
 
 static void cfg80211_rfkill_poll(struct rfkill *rfkill, void *data)
 {
@@ -371,7 +373,9 @@ struct wiphy *wiphy_new(const struct cfg
 	rdev->wiphy.flags |= WIPHY_FLAG_PS_ON_BY_DEFAULT;
 #endif
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	wiphy_net_set(&rdev->wiphy, &init_net);
+#endif
 
 	rdev->rfkill_ops.set_block = cfg80211_rfkill_set_block;
 	rdev->rfkill = rfkill_alloc(dev_name(&rdev->wiphy.dev),
@@ -684,8 +688,10 @@ static int cfg80211_netdev_notifier_call
 		mutex_lock(&rdev->devlist_mtx);
 		list_add_rcu(&wdev->list, &rdev->netdev_list);
 		rdev->devlist_generation++;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 		/* can only change netns with wiphy */
 		dev->features |= NETIF_F_NETNS_LOCAL;
+#endif
 
 		if (sysfs_create_link(&dev->dev.kobj, &rdev->wiphy.dev.kobj,
 				      "phy80211")) {
@@ -829,6 +835,7 @@ static struct notifier_block cfg80211_ne
 	.notifier_call = cfg80211_netdev_notifier_call,
 };
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 static void __net_exit cfg80211_pernet_exit(struct net *net)
 {
 	struct cfg80211_registered_device *rdev;
@@ -846,14 +853,17 @@ static void __net_exit cfg80211_pernet_e
 static struct pernet_operations cfg80211_pernet_ops = {
 	.exit = cfg80211_pernet_exit,
 };
+#endif
 
 static int __init cfg80211_init(void)
 {
 	int err;
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	err = register_pernet_device(&cfg80211_pernet_ops);
 	if (err)
 		goto out_fail_pernet;
+#endif
 
 	err = wiphy_sysfs_init();
 	if (err)
@@ -888,8 +898,10 @@ out_fail_nl80211:
 out_fail_notifier:
 	wiphy_sysfs_exit();
 out_fail_sysfs:
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	unregister_pernet_device(&cfg80211_pernet_ops);
 out_fail_pernet:
+#endif
 	return err;
 }
 subsys_initcall(cfg80211_init);
@@ -901,7 +913,9 @@ static void __exit cfg80211_exit(void)
 	unregister_netdevice_notifier(&cfg80211_netdev_notifier);
 	wiphy_sysfs_exit();
 	regulatory_exit();
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	unregister_pernet_device(&cfg80211_pernet_ops);
+#endif
 	destroy_workqueue(cfg80211_wq);
 }
 module_exit(cfg80211_exit);
--- a/net/wireless/wext-core.c
+++ b/net/wireless/wext-core.c
@@ -400,7 +400,11 @@ static void wireless_nlevent_process(uns
 {
 	struct sk_buff *skb;
 	while ((skb = skb_dequeue(&wireless_nlevent_queue)))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 		rtnl_notify(skb, &init_net, 0, RTNLGRP_LINK, NULL, GFP_ATOMIC);
+#else
+		rtnl_notify(skb, 0, RTNLGRP_LINK, NULL, GFP_ATOMIC);
+#endif
 }
 
 static DECLARE_TASKLET(wireless_nlevent_tasklet, wireless_nlevent_process, 0);
--- a/net/wireless/wext-proc.c
+++ b/net/wireless/wext-proc.c
@@ -98,7 +98,11 @@ static void *wireless_dev_seq_start(stru
 		return SEQ_START_TOKEN;
 
 	off = 1;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24))
 	for_each_netdev(net, dev)
+#else
+	for_each_netdev(net)
+#endif
 		if (off++ == *pos)
 			return dev;
 	return NULL;
